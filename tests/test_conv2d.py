import numpy as np

# fmt: off

input = np.array([[[[-3.78092186e-02,  2.35361353e-02,  1.06767155e-01,
           7.78636836e-01,  1.19196400e+00, -5.65724604e-01],
         [-7.91039536e-01, -4.45222897e-01,  1.10652272e+00,
           9.36584705e-01, -3.09982018e-01,  9.66607271e-01],
         [ 5.65855894e-01,  3.36489795e-01,  5.41599130e-01,
          -1.81689299e+00, -8.00087882e-01,  1.10026710e+00],
         [ 8.52686924e-01, -2.45674258e+00, -2.71909876e-01,
           8.03144234e-01, -9.39599578e-01, -1.10009985e+00],
         [-4.78592220e-01,  7.91060954e-01,  2.09885266e+00,
           2.47811409e-01,  4.02551069e-01,  1.24997114e-01],
         [-1.59980488e+00, -1.16779233e+00,  9.76191831e-01,
           3.83691849e-01, -2.22413866e-01,  2.40551665e-01]],

        [[ 1.91095520e+00,  1.93429328e-02,  8.36793853e-01,
           4.86184292e-01,  1.24475311e+00,  9.79958764e-01],
         [-8.01030148e-01, -3.59275106e-01,  1.55159843e+00,
           9.74766716e-01,  3.44845954e-01,  8.29506497e-01],
         [-6.95486956e-01, -1.93803814e+00,  1.17051232e-01,
           4.60581421e-01,  2.31351071e+00, -1.26694702e+00],
         [ 5.75919266e-02,  4.26153284e-02, -9.51396762e-01,
          -8.26427829e-01,  2.19251341e+00,  8.20447021e-01],
         [-2.30460308e-01,  2.42273740e-01,  7.33867838e-01,
           9.44479794e-01, -1.91975369e+00,  1.30961355e+00],
         [ 5.81027723e-01, -1.50113593e+00,  1.15764268e+00,
          -1.24008364e+00,  8.57870667e-01, -7.59741790e-01]],

        [[-2.09333019e+00, -4.60017392e-02, -1.15307743e-01,
           9.95510410e-02,  1.10379463e+00, -8.07128122e-01],
         [ 1.49909298e+00,  8.91742008e-01, -1.91835351e-01,
          -7.81228184e-01,  8.58831545e-01, -3.19819635e-01],
         [ 1.19532721e+00,  2.89509022e-01, -1.12781278e-01,
          -3.31894639e-02,  6.92034703e-01,  1.29757804e+00],
         [-5.23825833e-01,  1.77997148e-01, -6.63521077e-01,
           6.46568583e-01, -1.49559492e+00, -1.02439274e-01],
         [-7.29738531e-01, -1.75191981e+00, -3.35537525e-01,
          -2.76867952e+00,  9.57780555e-01, -1.11890681e+00],
         [-7.18703621e-01, -9.10643684e-01, -8.55566019e-01,
           8.99831029e-01, -1.09020648e+00,  5.10629886e-01]],

        [[ 2.24877164e-01,  2.14230383e+00, -6.71798839e-01,
          -8.31318491e-01, -4.69105146e-01, -1.01018715e+00],
         [ 5.22373117e-01,  8.13080390e-01,  2.37281362e-01,
           1.13206546e+00, -1.63444246e+00, -2.35743028e-01],
         [ 1.41150792e+00,  5.37753865e-02, -4.30527829e-01,
           8.21171544e-01,  5.97533251e-01,  6.91363812e-01],
         [-3.73885290e-01,  9.48993696e-01, -2.30271401e+00,
          -6.62188336e-01,  6.25561902e-01, -5.95734490e-02],
         [ 7.62178252e-01,  6.40052854e-02, -1.35437036e-02,
          -1.35302868e+00,  4.64962635e-01,  5.72517964e-02],
         [ 1.27294084e+00,  2.39636642e-01,  1.38166082e+00,
           2.63446885e+00, -6.53823113e-01, -3.65026606e-01]]],


       [[[ 1.13652300e+00,  7.60727680e-02,  1.05970931e+00,
           8.56152105e-01,  1.34463491e+00, -1.31103099e+00],
         [ 9.59154913e-02,  2.74133202e-01,  7.64960268e-01,
           1.13264203e+00, -7.02733074e-01,  1.10216897e+00],
         [ 1.08094635e-02, -7.81723846e-01,  1.90778194e-01,
           1.40345188e+00,  4.86791220e-01,  1.15073232e+00],
         [ 1.85481231e+00, -5.49650374e-01,  2.41499293e-01,
           6.65368471e-01,  2.11062399e+00, -1.07362664e+00],
         [ 2.74332210e-01,  9.07637107e-01, -3.88694527e-02,
          -1.11600614e+00, -1.35375935e+00, -3.61755675e-01],
         [-9.14642626e-01,  8.60834115e-01,  2.66367703e-01,
           8.08010049e-01,  2.00867135e-01, -2.29844628e-01]],

        [[ 8.07221880e-01,  6.86454131e-01,  3.04888450e-01,
          -1.66100723e-01, -1.22916450e-01, -1.32491347e+00],
         [ 6.43646924e-01,  2.03664634e-01,  1.28257530e+00,
           1.56261892e+00,  2.95844076e+00,  1.10147264e+00],
         [-7.61798135e-01, -4.39218346e-01, -1.85744604e+00,
          -2.59961363e-01, -1.49361992e+00, -5.39189457e-01],
         [ 1.79857401e+00, -1.01009901e-03,  2.89491867e-01,
          -1.07975487e+00, -1.23172900e+00, -1.94402666e-02],
         [-8.40509069e-01, -2.06837047e+00, -1.82370606e+00,
           1.42118407e+00, -1.65272605e+00,  3.06707390e-01],
         [-1.88158487e-01, -7.72661430e-01, -7.72347144e-01,
           6.95070869e-01, -3.59167134e-01,  1.15631699e+00]],

        [[ 1.01218832e+00,  1.67596847e+00,  1.50311994e+00,
          -2.05511991e+00, -2.66267980e-02, -7.42641782e-01],
         [-5.53646442e-01, -2.99412346e-01,  1.27299160e-01,
           2.34391889e+00, -4.23245778e-01,  2.20530755e-01],
         [ 3.44669690e-01, -4.73620471e-01, -1.03363100e+00,
          -5.24656932e-01,  1.07760189e-01,  5.04986475e-01],
         [-2.51415934e+00, -7.75139372e-01, -6.17378780e-01,
           1.01207522e+00, -1.37309749e+00, -8.73635080e-01],
         [-3.95593912e-01, -1.36906318e+00,  1.17954895e+00,
           5.25485635e-01, -6.48175266e-01, -1.18966693e+00],
         [ 4.72404632e-01, -6.16623962e-02,  1.54987778e+00,
           1.68840585e-01, -8.31548010e-01,  1.02614128e+00]],

        [[ 1.59604878e-01,  6.98022913e-02, -8.96788312e-03,
          -1.33846755e+00,  8.68076247e-01, -1.73618619e+00],
         [-1.22971623e+00,  6.16584956e-02,  2.51305955e-01,
          -2.93846195e-01, -6.41769337e-01, -8.99521207e-01],
         [-4.61663984e-01,  1.67230620e+00, -3.10392005e-01,
           1.10853832e+00,  1.36234543e+00,  1.27178855e+00],
         [ 7.80740873e-01,  6.21862406e-01,  1.31899316e+00,
          -1.23726075e+00,  4.16287951e-01, -2.34649949e+00],
         [ 1.77504971e+00, -4.92426395e-01, -1.43240437e+00,
           2.43631336e-01,  5.62399962e-01,  2.13244216e+00],
         [-1.44813614e+00, -1.27798714e+00,  1.05754823e+00,
          -7.67611855e-01, -9.77585334e-01,  1.27755607e+00]]],


       [[[-3.87187739e-02,  9.70962875e-01,  1.17812543e-01,
          -2.13460551e-01, -1.87514356e+00,  4.27380575e-01],
         [ 7.25236521e-01,  5.58822311e-01,  4.26203322e-01,
           4.71720797e-01, -9.47196793e-01,  7.06320223e-01],
         [-3.76033307e-01,  8.06673593e-01,  1.26235298e+00,
           1.40952966e-01, -3.18708527e-01,  7.33642553e-01],
         [-1.52381600e+00, -3.92634018e-01, -1.66601485e-01,
           5.93994632e-01, -1.69298218e+00, -1.00969166e+00],
         [-9.90186317e-01,  6.47531426e-01,  9.89575209e-01,
           1.00217523e+00, -1.14861076e+00,  3.56437992e-01],
         [ 1.48211049e+00, -1.11852608e+00, -1.95524529e+00,
          -1.55941303e+00, -7.50463849e-01,  2.59369042e-01]],

        [[ 1.49143049e+00, -1.54553091e+00,  1.39842021e+00,
          -1.53060371e+00, -8.45802131e-01,  5.93651090e-01],
         [-2.30501829e-01,  1.80738766e+00,  2.16341115e-01,
          -1.84079976e+00, -5.48229723e-01, -6.79385761e-01],
         [-2.78581234e-01,  1.82098215e+00,  1.92988106e+00,
          -6.91729462e-01,  5.19907141e-01, -7.07867979e-01],
         [-3.64569426e-01,  1.80170445e+00,  1.72085658e-01,
          -1.33540975e+00,  2.95194026e-01, -1.42415892e+00],
         [ 5.55611799e-01, -1.21790065e+00, -9.72805352e-01,
          -2.42282179e-01,  1.26707303e-01,  2.87402836e-01],
         [ 6.62132639e-01, -4.49232151e-01, -5.01873708e-01,
           3.90125646e-01, -3.82643657e-01,  1.73191467e+00]],

        [[ 1.67472666e+00,  1.51473134e-01, -1.07643339e+00,
          -1.26046928e-01,  7.42404093e-01, -2.62141965e-01],
         [ 4.64038981e-01, -5.60145696e-02, -5.00749932e-01,
          -7.94552252e-01, -1.28958403e+00, -8.42242558e-01],
         [-2.01712962e-02,  7.74813051e-01,  8.39210094e-01,
          -1.08785449e+00,  1.78838491e+00, -2.87121675e-01],
         [-1.34793819e+00,  1.50234001e+00,  1.12204869e+00,
           3.26703816e-01, -1.71048815e+00,  4.53387744e-02],
         [-5.44072299e-01, -3.03828061e-01, -3.20648402e-01,
           4.47804581e-01,  1.83227027e+00,  8.28733576e-01],
         [-1.48554929e-01,  8.83273986e-02, -1.94981983e+00,
          -7.39975943e-01, -1.36499034e-01,  7.19456530e-01]],

        [[ 1.19693152e-01,  1.56855814e-01, -2.92197860e-01,
          -1.77625624e-01,  4.10370646e-01,  6.18284994e-01],
         [ 9.96307172e-01, -1.52794872e-01, -3.70078490e-01,
           1.27809852e+00,  7.78863465e-01,  6.48796954e-01],
         [-3.48239276e-01,  7.27066472e-01,  7.51611364e-01,
           1.65741351e+00, -4.76549699e-01, -2.24467873e+00],
         [-1.73524248e-01, -7.34951350e-01, -7.52842884e-02,
          -2.06460726e-01,  9.51690700e-01, -8.20817646e-01],
         [ 9.60234939e-02,  2.09916020e+00, -7.90553170e-01,
           2.70336467e-01,  9.89507753e-01, -2.31042984e-01],
         [-9.59935984e-01, -5.30559987e-01,  6.00746245e-01,
          -4.34677610e-02,  5.24725072e-01,  1.41644103e+00]]]])
weight = np.array([[[[ 0.58214997,  0.96119254,  1.85211377],
         [-1.22338309,  0.3350871 , -3.20847816],
         [ 1.30866635,  1.24218698, -0.7816082 ]],

        [[-0.71134046, -0.95562584, -0.98215004],
         [ 1.22696347, -0.4274457 , -0.79596075],
         [ 0.38155591, -0.82144412,  0.6548109 ]],

        [[-0.02644603,  0.96576125,  0.5488944 ],
         [ 0.86019052, -0.74831411, -0.58545493],
         [ 0.47297026,  0.89685231,  1.10233315]],

        [[ 1.03652664,  1.18724587, -0.07601511],
         [ 1.48511164, -0.72602445,  0.46785822],
         [-0.03533757,  1.4443784 , -0.31582672]]]])
pure_result = np.array([[[[  4.12530706,  -1.31192257,  -2.64921048],
         [  2.76196231,  -2.18296607,  -2.10054139],
         [ -8.91637785,  -4.49709863, -13.18781179]]],


       [[[ -5.68925411,   2.84420956,  -1.2557101 ],
         [  1.02258194,   3.3541432 ,  -3.82673384],
         [ -7.65570575,   6.81856252,   8.29360953]]],


       [[[ -0.21235736,  -2.45334636,  -7.90451361],
         [ -1.7790257 ,   3.78582968,  -1.71240296],
         [ -3.7979888 ,  -3.86249908,  -7.91892092]]]])

# fmt: on

# input: np.random.randn(3, 4, 6, 6)
# weight: np.random.randn(1, 4, 3, 3)
# pure_result: result in pure code to compare


import torch
import torch.nn.functional as F
from torch import nn

truth = F.conv2d(torch.from_numpy(input), torch.from_numpy(weight), padding=1, stride=2)
truth = truth.numpy()


print(np.allclose(truth, pure_result))

# import tensorflow as tf
# from keras.layers import Conv2D

# input = input.transpose(0, 2, 3, 1)  # (N,H,W,C)
# weight = weight.transpose(2, 3, 1, 0)  # (kH,kW,in_channels,out_channels)
# pure_result = pure_result.transpose(0, 2, 3, 1)  # (N,H,W,C)

# truth = Conv2D(
#     pure_result.shape[-1],
#     3,
#     padding="SAME",
#     input_shape=input.shape[1:],
#     strides=(2, 2),
# )(input)
# truth = truth.numpy()

# print(np.allclose(pure_result, truth))
